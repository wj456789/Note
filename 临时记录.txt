


    public static void main(String[] args) {
        String s="sdas";
        switch (s){
            case "as":
                System.out.println("a");
            default:
                System.out.println("d");
        }
    }
switch中参数可以是byte\short\int\char\String,甚至是空字符串
但是不能是long\double\float




List浅拷贝
1、遍历循环复制
List<Person> destList=new ArrayList<Person>();  
for(Person p : srcList){  
    destList.add(p);  
}  

2、使用List实现类的构造方法
List<Person> destList=new ArrayList<Person>(srcList);  

3、使用list.addAll()方法
List<Person> destList=new ArrayList<Person>();  
destList.addAll(srcList);  

4、使用System.arraycopy()方法
Person[] srcPersons=srcList.toArray(new Person[0]);  
Person[] destPersons=new Person[srcPersons.length];  
System.arraycopy(srcPersons, 0, destPersons, 0, srcPersons.length);  

List深拷贝
@Test
public void test() throws IOException, ClassNotFoundException {
        UserTest user1 = new UserTest("小明", 18);
        UserTest user2 = new UserTest("小红", 16);
        List<UserTest> list = new ArrayList<>();
        list.add(user1);
        list.add(user2);
        System.out.println("原List：" + list);

        /* 1、进行深度复制
        List<UserTest> listNew = new ArrayList<>();
        for (int i = 0; i < list.size(); i += 1) {
            listNew.add((UserTest) list.get(i).clone());
        }
	*/
	
	//2、运行序列化和反序列化
        List<UserTest> listNew = deepCopy(list);

        System.out.println("对新list进行操作");
        for (UserTest userTest : listNew) {
            userTest.setAge(99);
        }

        System.out.println("原list" + list);
        System.out.println("新list" + listNew);
}
  
  
  
public static <T> List<T> deepCopy(List<T> src) throws IOException, ClassNotFoundException {
        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream(byteOut);
        out.writeObject(src);

        ByteArrayInputStream byteIn = new ByteArrayInputStream(byteOut.toByteArray());
        ObjectInputStream in = new ObjectInputStream(byteIn);
        List<T> dest = (List<T>) in.readObject();
        return dest;
}



















git pull可以理解为 git fetch 的操作 + git merge的操作，其详细说明如下：
git fetch origin master #从远程主机的master分支拉取最新内容 
git merge FETCH_HEAD #将拉取下来的最新内容合并到当前所在的分支中
在merge的时候，会将有冲突不能合并的内容做出提示。

git pull origin remotebranch
出现冲突

使用git status查看冲突文件所在路径【both modified标记对应的就是冲突文件，即test002.txt文件为冲突文件】
<<<<<<<HEAD
本地代码
=======
远程代码
>>>>>>>a4fsd54sdfsdfwe

Git很智能的将两个人的修改同时显示出来，并用“=======”分割开来
“<<<<<<<HEAD” 与 “=======” 中间的是冲突位置中对应的本地仓库的修改。
“=======” 与 “>>>>>>>” 中间的是冲突位置中对应的远程仓库的修改（也就是刚拉取下来的内容）。
“>>>>>>>” 后面是本次的提交ID。
“<<<<<<<HEAD”、“=======”、“>>>>>>>”、提交ID并非实际编写的代码，解决冲突时注意删除。












git commit --no-edit无需提交message














public static void main(String[] args) {
        System.out.println("ceil2.0:"+Math.ceil(2.0));
        System.out.println("ceil2.5:"+Math.ceil(2.5));
        System.out.println("floor2.0:"+Math.floor(2.0));
        System.out.println("floor2.5:"+Math.floor(2.5));
    }
    输出
ceil2.0:2.0
ceil2.5:3.0
floor2.0:2.0
floor2.5:2.0















public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("1", 5);
        map.put("7", 12);
        map.put("3", 8);
        map.put("8", 2);
        map.put("5", 6);
        map.put("6", 9);

        map.keySet().stream().sorted(Comparator.comparing((String hostName) -> map.get(hostName)).reversed()).forEach(hostName -> {
            System.out.println(hostName + ":" + map.get(hostName));
            if (hostName.equals("6")) {
                map.remove("1");
                return;
            }
            System.out.println(map.size());
        });
}
输出
7:12
6
6:9
3:8
5
5:6
5
1:null
5
8:2
5
	
public static void main(String[] args) {
        Map<String, List<RedisInstancesInfo>> listMap = new HashMap<>();
        List<RedisInstancesInfo> redisInstancesInfos=new ArrayList<>();
        RedisInstancesInfo redisInstancesInfo=new RedisInstancesInfo();
        redisInstancesInfo.setRedisInfo("dsadasdsadas");
        redisInstancesInfo.setRedisId(12);
        redisInstancesInfos.add(redisInstancesInfo);

        RedisInstancesInfo redisInstancesInfo1=new RedisInstancesInfo();
        redisInstancesInfo1.setRedisInfo("hgfdkhbg");
        redisInstancesInfo1.setRedisId(56);
        redisInstancesInfos.add(redisInstancesInfo1);
        listMap.put("a",redisInstancesInfos);
        listMap.put("b",redisInstancesInfos);

        listMap.keySet().stream().sorted(Comparator.comparing((String hostName) -> listMap.get(hostName).size()).reversed()).forEach(hostName -> {
            System.out.println(hostName + ":" + listMap.get(hostName));

            List<RedisInstancesInfo> newList = new ArrayList<>();
            newList.addAll(listMap.get(hostName));

            RedisInstancesInfo redisInstancesInfo11=new RedisInstancesInfo();
            redisInstancesInfo11.setRedisInfo("dsadasdsadas");
            redisInstancesInfo11.setRedisId(12);
            newList.remove(redisInstancesInfo11);
            listMap.put(hostName,newList);

            System.out.println(hostName + ":" + listMap.get(hostName));
            System.out.println(listMap.size());
        });
}
输出
a:[RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=dsadasdsadas, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=12, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null), RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=hgfdkhbg, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=56, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null)]
a:[RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=hgfdkhbg, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=56, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null)]
2
b:[RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=dsadasdsadas, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=12, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null), RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=hgfdkhbg, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=56, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null)]
b:[RedisInstancesInfo(peerId=null, hostName=null, roleName=null, nodeId=null, port=null, clusterid=null, clusterSeq=null, healthStatus=null, inCluster=false, masterId=null, slaveId=null, redisInfo=hgfdkhbg, type=null, masterHostName=null, masterRoleName=null, master=null, redisId=56, businessip=null, ip=null, instanceGroupName=null, omClusterId=null, maxMemory=null, memoryUsage=null)]
2








public static void main(String[] args) {
        List<RedisInstancesInfo> redisInstanceList=new ArrayList<>();
        RedisInstancesInfo redisInstancesInfo=new RedisInstancesInfo();
        redisInstancesInfo.setRedisId(78);
        redisInstancesInfo.setRedisInfo("dsadasda");
        redisInstanceList.add(redisInstancesInfo);

        JSONObject requestJson = new JSONObject();
        requestJson.put("clusterId", "10");
        requestJson.put("clusterRedisList", redisInstanceList);
        System.out.println(requestJson.toJSONString());

        JSONObject requestJson1 = new JSONObject();
        requestJson1.put("clusterId", "10");
        requestJson1.put("clusterRedisList", JSONArray.parseArray(JSONObject.toJSONString(redisInstanceList)));
        System.out.println(requestJson1.toJSONString());

    }
    
    输出：
    {"clusterRedisList":[{"inCluster":false,"redisId":78,"redisInfo":"dsadasda"}],"clusterId":"10"}
{"clusterRedisList":[{"inCluster":false,"redisId":78,"redisInfo":"dsadasda"}],"clusterId":"10"}



fastjson
public static void main(String[] args) {
	Map<String,String> map=new HashMap<>();
	map.put("1","dsadas");
	map.put("2","hgrfhgf");
	System.out.println(JSON.toJSONString(map));
	String str=JSON.toJSONString(map);
	Map<String, String> envMap = JSON.parseObject(str, new TempTypeReference());
	Map<String, String> envMap1 = JSON.parseObject(str, new TypeReference<Map<String,String>>(){});
	System.out.println(JSON.toJSONString(envMap));
	System.out.println(JSON.toJSONString(envMap1));
}

static class TempTypeReference extends  TypeReference<Map<String, String>>{
	public TempTypeReference(){}
}
输出：
{"1":"dsadas","2":"hgrfhgf"}
{"1":"dsadas","2":"hgrfhgf"}
{"1":"dsadas","2":"hgrfhgf"}








ArrayList和JSONArray 相互转换

ArrayList 转成 JSONArray
JSONArray studentJsonArray = JSONArray.parseArray(JSONObject.toJSONString(studentList));
JSONArray studentJsonArray = JSONArray.parseArray(JSON.toJSONString(studentList));

JSONArray转成ArrayList
List<Student> studentList = studentJSONArray.toJavaList(Student.class);
List<Student> studentList = JSON.parseArray(studentJSONArray.toJSONString(), Student.class);
List<Student> studentList = JSONObject.parseArray(studentJSONArray.toJSONString(), Student.class);
List<Student> studentList = JSONArray.parseArray(studentJSONArray.toJSONString(), Student.class);






import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.google.json.JsonSanitizer;
import lombok.extern.slf4j.Slf4j;

import javax.ws.rs.core.Response.Status;
import java.io.IOException;

/**
 * json模型转换类
 *
 */
@Slf4j
public class JacksonConvertHelper {
    private static ObjectMapper MAPPER;

    private static synchronized ObjectMapper getMapperInstance() {
        if (MAPPER == null) {
            MAPPER = new ObjectMapper();
            MAPPER.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
            MAPPER.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
            MAPPER.setSerializationInclusion(Include.NON_NULL);
        }
        return MAPPER;
    }


    /**
     * getJavaBeanByString
     *
     * @param jsonString param
     * @param clazz      param
     * @param <T>        param
     * @return obj
     * @throws PaaSException PaaSException
     */
    public static <T> T getJavaBeanByString(String jsonString, Class<T> clazz) throws PaaSException {
        T obj = null;
        try {
            if (jsonString != null && !jsonString.isEmpty()) {
                jsonString = JsonSanitizer.sanitize(jsonString);
                obj = getMapperInstance().readValue(jsonString, clazz);
            }
            return obj;
        } catch (IOException e) {
            log.error("cannot get java bean by string.", e);
            throw new PaaSException(Status.INTERNAL_SERVER_ERROR, "cannot get java bean by string");
        }
    }

    /**
     * getStringByJavaBean
     *
     * @param value param
     * @return value
     * @throws PaaSException PaaSException
     */
    public static String getStringByJavaBean(Object value) throws PaaSException {
        try {
            String jsonString = getMapperInstance().writeValueAsString(value);
            return JsonSanitizer.sanitize(jsonString);
        } catch (IOException e) {
            log.error("cannot get string by java bean.", e);
            throw new PaaSException(Status.INTERNAL_SERVER_ERROR, "cannot get string by java bean");
        }
    }

    /**
     * getCollectionJavaBeanByString
     *
     * @param jsonString      param
     * @param collectionClazz param
     * @param clazz           param
     * @param <T>             param
     * @param <K>             param
     * @return obj
     * @throws PaaSException PaaSException
     */
    public static <T, K> T getCollectionJavaBeanByString(String jsonString, Class<K> collectionClazz, Class<T> clazz)
        throws PaaSException {
        T obj = null;
        try {
            if (jsonString != null && !jsonString.isEmpty()) {
                jsonString = JsonSanitizer.sanitize(jsonString);

                JavaType javaType = getMapperInstance().getTypeFactory()
                    .constructParametricType(collectionClazz, clazz);
                obj = getMapperInstance().readValue(jsonString, javaType);
            }
            return obj;
        } catch (IOException e) {
            log.error("cannot get collection java bean by string", e);
            throw new PaaSException(Status.INTERNAL_SERVER_ERROR, "cannot get collection java bean by string");
        }
    }

    /**
     * getJavaBeanByString
     *
     * @param jsonString    param
     * @param typeReference param
     * @param <T>           param
     * @return typeReference
     */
    public static <T> T getJavaBeanByString(String jsonString, TypeReference<T> typeReference) {
        try {
            log.info("******Start to exec method getJavaBeanByString");
            if (jsonString != null && !jsonString.isEmpty()) {
                log.info("******End to exec method getJavaBeanByString");
                jsonString = JsonSanitizer.sanitize(jsonString);
                return getMapperInstance().readValue(jsonString, typeReference);
            }
        } catch (Exception e) {
            log.error("JacksonParser error", e);
        }
        return null;
    }
}









throws抛出一类异常，throw抛出一个异常，异常不处理程序中断，但是无论throws和throw只要异常被catch处理程序就会向下运行
    public static void main(String[] args){
        try {
            test();
        } catch (Exception e) {
	    //异常捕获
            System.out.println(4);
        }
	//异常被捕获处理，程序继续执行
        System.out.println(5);
    }

    static void test(){
        try {
            int i=3/0;
	    //有异常程序中断
            System.out.println(1);
        } catch (Exception e){
	    //异常捕获
            System.out.println(2);
	    //异常抛出，方法终止
            throw e;
        }
        System.out.println(3);
    }

输出：
2
4
5



云计算之概念——IaaS、SaaS、PaaS、Daas
云计算通俗来说就是输入/输出和计算不在一个主机上。计算要用到计算设备，计算设备一般是指CPU、内存和硬盘，输入/输出设备一般是指键盘、鼠标、显示器、耳机、音响、话筒等外设。而我们的个人计算机是使用主板将这些东西连接到一起来协调工作。

一个软件在执行以完成某项任务的时候，如果用到的计算设备和输入/输出设备不是通过主板连接，而是通过网络连接，那么这个过程就叫云计算。

一个完整的云计算环境由云端、计算机网络和终端三部门组成（也就是常说的云、管、端）。云端就是指计算设备，负责完成软件的计算；终端是指我们用来完成输入/输入的设备；计算机网络负责将云端和终端连接起来，完成信息传输（将终端的输入指令传输到云端，将云端的执行结果反馈给终端）。
    
公有云服务商组建了云端并对外出租计算设备，那么出租类型也就是我们常说的——IaaS SaaS、PaaS、DaaS。


1、数据信息层
数据信息
2、应用软件层
应用软件
3、平台软件层
中间件/运行库
数据库
操作系统
4、基础设施层
服务器/虚拟机
磁盘柜
计算机网络
机房基础设备



IaaS(基础设施及服务)
租户管理
123
云端公司管理
4

PaaS(平台即服务)
租户管理
12
云端公司管理
34

SaaS(软件即服务)
租户管理
1
云端公司管理
234

DaaS(数据即服务)
租户直接查询结果
云端公司管理
1234






【String canonicalPath = file.getCanonicalPath();//返回文件的绝对路径
对于文件路径校验场景，获取文件路径时，必须使用getCanonicalPath()，禁止使用getAbsolutePath()。】

【使用assert断言语是对代码进行诊断测试的方便机制。当使用有副作用的断言表达式时，assert语句的行为

取决于运行时属性的状态，启用时，assert语句会计算表达式的值，如果值为false时抛出AssertionError异常；当关闭断言时，assert语句(断言表达式)不执行，导致程序的运行结果不一致。所以应该禁止在断言

中使用有副作用的表达式。有副作用的表达式一般指更改对象状态或修改变量值等操作的语句。

private ArrayList<String> names;
void process(int index) {
    boolean nullsRemoved = names.remove(null);
    assert nullsRemoved; // No side effect
    // ...
}
】

【
//正确示例
//整型
private int count = 0;
private final Integer lock = new Integer(count);
public void doSomething() {
    synchronized (lock) {
    	count++;
    	// ...
    }	
}

//字符串实例,字符串对象与字符串常量不同，字符串实例具有唯一的引用，其内置锁与其他字符串对象也不相同。
private final String lock = new String("LOCK");
public void doSomething() {
    synchronized (lock) {
        // ...
    }
}

//private final锁对象
private final Object lock = new Object();
public void doSomething() {
    synchronized (lock) {
    	// ...
    }
}



	
//错误示例
//Boolean型锁对象,基于Boolean型的锁对象实现同步,Boolean只有两个值：true和false。包含相同值的Boolean数据，在Java虚拟机中共享同一个Boolean类示例。
private final Boolean initialized = Boolean.FALSE;
public void doSomething() {
    synchronized (initialized) {
    	// ...
    }
}

//封包过的基础数据类型,使用封包的Integer对象实现同步，封包过的数据类型会使用整型范围内的同一个实例
private int count = 0;
private final Integer lock = count; // Boxed primitive Lock is shared
public void doSomething() {
    synchronized (lock) {
        count++;
        // ...		
    }
}
//通常来说，基于封包的数值对象进行同步都是不安全的

//Interned String对象,当调用String.intern()方法时，如果字符串常量池中存在相同的String时，会返回该字符串的地址。否则，该字符串会加入到常量池中，并返回该字符串在常量池中的引用。
private final String lock = new String("LOCK").intern();
public void doSomething() {
	synchronized (lock) {
    	// ...
    }
}

//字符串常量,字符串常量会会自动调用String.intern()方法
private final String lock = "LOCK";
public void doSomething() {
    synchronized (lock) {
    	// ...
    }
}
】
【
调用Thread.start()方法表示启动一个线程，并执行该线程对应的run()方法。但是直接调用Thread.run()方
法，run()方法中的语句是由当前线程执行而不是新创建线程来执行。
】


HTTP中PATCH方法是新引入的，是对PUT方法的补充，用来对已知资源进行局部更新
put方法会将修改后的完整对象直接传给后台，patch局部更新，只传送更新字段，后端也只会更新收到的字段









【system】
System.getProperty只能获取到系统的相关属性
System.getenv还可以获取自己设置的环境变量，但是被归为不可信数据，使用前需要校验。









一台电脑,配置两个git仓库
https://blog.csdn.net/xy3233/article/details/113616028










maven dependencies 里面的包怎么导出
进入工程pom.xml 所在的目录下，
输入以下命令：mvn dependency:copy-dependencies -DoutputDirectory=lib
更简单的 mvn dependency:copy-dependencies 会导出到target/jar 下面

https://blog.csdn.net/qq_27093465/article/details/90665167
https://www.cnblogs.com/shengulong/p/9643562.html




IDEA
file encoding-->Transparent native-to-ascii conversion
Properties 文件，重要属性 Transparent native-to-ascii conversion 主要用于转换 ascii，一般都要勾选，不然 Properties 文件中的注释显示的都不会是中文。

对单独文件的编码修改还可以点击右下角的编码设置区。如果代码内容中包含中文，则会弹出演示中的操作选择。
Reload 表示使用新编码重新加载，新编码不会保存到文件中，重新打开此文件，旧编码是什么依旧还是什么。
Convert 表示使用新编码进行转换，新编码会保存到文件中，重新打开此文件，新编码是什么则是什么。
含有中文的代码文件，Convert 之后可能会使中文变成乱码，所以在转换成请做好备份，不然可能出现转换过程变成乱码，无法还原。






插件和普通依赖不同的是，Maven会区别对待普通依赖的远程仓库与插件的远程仓库，当Maven需要的插件在本地仓库不存在时是不会去我们以前配置的远程仓库查找插件的，而是需要有专门的插件远程仓库
配置插件远程仓库:
<pluginRepositories>
        <pluginRepository>
            <id>nexus</id>
            <name>nexus</name>
            <url>【我的地址】</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </pluginRepository>
</pluginRepositories>

超级父POM：\org\apache\maven\model\pom-4.0.0.xml，它是所有Maven POM的父POM，所有Maven项目都继承该配置。在该文件中可以查看默认的远程插件仓库配置：
<pluginRepositories>
    <pluginRepository>
      <id>central</id>
      <name>Central Repository</name>
      <url>http://repo.maven.apache.org/maven2</url>
      <layout>default</layout>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
    </pluginRepository>
</pluginRepositories>

maven项目先找本地仓库，再优先私服，最后中央仓库



Maven继承
解决多个模块使用相同的依赖，在继承中，父模块知识为了消除配置的重读，本身不包含除了pom.xml的其他文件，不需要src/main/java之类的文件。
子模块的pom.xml
<parent>
    <groupId>com.huawei.mae.ci</groupId>
    <artifactId>mae-starter-java-app-without-db</artifactId>
    <version>220.100.1-SNAPSHOT</version>
</parent>


maven聚合
项目往往会被划分为好几个模块，我们需要一次构件多个模块，而不用每个模块都去mvn clean install一次，Maven聚合就是用来实现这个需求的
父模块
  <groupId>com.uidp</groupId>
  <artifactId>UidpWeb</artifactId>
  <packaging>pom</packaging>
  <version>0.0.1-SNAPSHOT</version>
  <name>UidpWeb</name>
  <url>http://maven.apache.org</url>
  <modules>
    <module>【我的模块】</module>
  </modules>


对于聚合模块来说，它知道有哪些被聚合的模块，但那些被聚合的模块不知道这个聚合模块的存在。
对于继承关系的父POM来说，它不知道有哪些子模块继承于它，但那些子模块都必须知道自己的父POM是什么。


版本一共可以分为几个层次，一般来说，版本可以分为：总版本号.分支版本号.小版本号-里程碑版本。

总版本号：一般表示框架的变动。
分支版本号：一般表示增加了一些功能。
小版本号：在分支版本上面进行bug的修复。
里程碑：SNAPSHOT–>alpha–>beta–>release–>GA




dependency和plugin标签都有相应的dependencyManagement和pluginManagement，plugins 和 pluginManagement的区别，和我们前面研究过的dependencies 和 dependencyManagement的区别是非常类似的。plugins 下的 plugin 是真实使用的，而 pluginManagement 下的 plugins下的 plugin 则仅仅是一种声明，子项目中可以对 pluginManagement下的 plugin 进行信息的选择、继承、覆盖等。

group是针对（）来说的，group（0）就是指的整个串，group（1） 指的是第一个括号里的东西，group（2）指的第二个括号里的东西。
public static void main(String[] args) {
	Pattern pat = Pattern.compile("([0-9])(a)[0-9]");
	Matcher matcher = pat.matcher("d0a1s2d3as4d5a6sd");
	while (matcher.find()) {
	//group配合find使用，输出匹配到的字符串
		System.out.println(matcher.group(0));//0或空输出所有
		System.out.println(matcher.group(1));//输出匹配到的第一个括号中的值
		System.out.println(matcher.start(1));//第一个括号中的值开头索引
		System.out.println(matcher.end(1));//第一个括号中的值最后的索引+1
	}
}

0a1
0
1
2

5a6
5
12
13


kubectl简介
https://www.cnblogs.com/faberbeta/p/13391905.html














@Autowired
https://blog.csdn.net/qq_28163609/article/details/108769977
https://www.cnblogs.com/acm-bingzi/p/springAutowired.html
@Autowired 可以对成员变量、方法以及构造函数进行注释。
Spring Bean的生命周期是先实例化然后再进行属性注入的

private User user;
@Autowired
public UserAccountServiceImpl(User user){
	this.user = user;
	this.school = user.getSchool();
}
Java变量的初始化顺序为：静态变量或静态语句块–>实例变量或初始化语句块–>构造方法–>@Autowired



TypeReference


https://www.cnblogs.com/jsStudyjj/p/6145623.html
    public static void main(String[] args) {
        Pattern pat = Pattern.compile("([0-9])(a)[0-9]");
        Matcher matcher = pat.matcher("d0a1s2d3as4d5a6sd");
        while (matcher.find()) {
            System.out.println(matcher.group(0));
            System.out.println(matcher.group(1));
            System.out.println(matcher.start(1));
            System.out.println(matcher.end(1));
        }
    }
    
0a1
0
1
2


5a6
5
12
13












IDEA设置忽略的文件夹和文件
File->Settings->Editor->FileType->Ignore files ans folders



restTemplate发送get与post请求 并且带参数
https://blog.csdn.net/qq_38976693/article/details/84107455


@jsonProperty是 Jackson的包，而@jsonfield是fastjson的包
都可以将json字段和bean属性在序列化反序列化之间互相转换

@JSONField这个注解可以用于get、set以及属性上面
@JSONproperty这个注解用于属性上面

@JsonProperty(value=“name”)   @JsonField(value=“name”)   
